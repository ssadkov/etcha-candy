const { PublicKey } = require('@solana/web3.js');
const { Metaplex, keypairIdentity } = require('@metaplex-foundation/js');
const { Connection, Keypair } = require('@solana/web3.js');

async function checkFinalCandyMachinePrice() {
  try {
    console.log('üîç Checking FINAL Candy Machine price with correct structure...');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet
    const connection = new Connection('https://api.devnet.solana.com');
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    const privateKeyArray = [149,148,143,202,169,187,184,148,215,237,214,44,60,28,106,132,60,116,254,205,157,166,244,7,165,25,46,94,158,98,233,214,67,183,232,68,166,218,234,48,186,46,35,183,102,67,37,234,234,223,199,12,225,158,96,57,236,154,85,13,144,176,133,170];
    const keypair = Keypair.fromSecretKey(new Uint8Array(privateKeyArray));
    
    // –°–æ–∑–¥–∞–µ–º Metaplex instance
    const mx = Metaplex.make(connection).use(keypairIdentity(keypair));
    
    // –ê–¥—Ä–µ—Å –Ω–æ–≤–æ–π Candy Machine
    const cmAddress = '474E2m7h422CrE7zSMXzW9HGkbWUHupzd4kFPaRPY497';
    
    console.log(`üìä Checking Candy Machine: ${cmAddress}`);
    
    // –ü–æ–ª—É—á–∞–µ–º Candy Machine
    const cm = await mx.candyMachines().findByAddress({
      address: new PublicKey(cmAddress),
    });
    
    console.log('‚úÖ Candy Machine found');
    console.log('- Items Available:', cm.itemsAvailable.toString());
    console.log('- Items Minted:', cm.itemsMinted.toString());
    console.log('- Items Remaining:', cm.itemsRemaining.toString());
    
    // –ü–æ–ª—É—á–∞–µ–º Candy Guard —á–µ—Ä–µ–∑ candyGuard –∏–∑ –º–æ–¥–µ–ª–∏ CM
    const guard = cm.candyGuard;
    
    console.log('‚úÖ Candy Guard found');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –≤ SOL
    const defaultSolPriceLamports = guard.guards.solPayment?.amount.basisPoints ?? null;
    if (defaultSolPriceLamports) {
      const priceInSOL = Number(defaultSolPriceLamports) / 1e9;
      console.log(`üí∞ Default SOL Price: ${priceInSOL} SOL (${defaultSolPriceLamports} lamports)`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ 0.1 SOL
      if (priceInSOL === 0.1) {
        console.log('üéâ SUCCESS! Price is correctly set to 0.1 SOL!');
      } else {
        console.log(`‚ö†Ô∏è  Price is ${priceInSOL} SOL, expected 0.1 SOL`);
      }
    } else {
      console.log('üí∞ Default SOL Price: No SOL payment guard');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (guard.groups && guard.groups.length > 0) {
      console.log('üìã Groups:');
      for (const group of guard.groups) {
        const label = group.label;
        const lamports = group.guards.solPayment?.amount.basisPoints ?? null;
        const tokenAmount = group.guards.tokenPayment?.amount.basisPoints ?? null;
        
        if (lamports) {
          const priceInSOL = Number(lamports) / 1e9;
          console.log(`  - ${label}: ${priceInSOL} SOL (${lamports} lamports)`);
        }
        if (tokenAmount) {
          console.log(`  - ${label}: ${tokenAmount} tokens`);
        }
      }
    } else {
      console.log('üìã Groups: None');
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    throw error;
  }
}

// Run the function
checkFinalCandyMachinePrice()
  .then(() => {
    console.log('\nüéâ Price check completed!');
  })
  .catch(error => {
    console.error('‚ùå Failed to check price:', error.message);
    process.exit(1);
  });
